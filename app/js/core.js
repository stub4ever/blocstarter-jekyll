'use strict';

// add semicon here avoid if other code doesnt finish the semicolons out properly
// it will still run fine
;(function (global) {

	var Blocstart = function Blocstart(node) {
		// Return a new object then use a function constructor to generate the property
		return new Blocstart.init(node); // this will return new object with an method init
	};

	Blocstart.init = function (node) {
		this.node = node || '';

		this.getNode();
	};

	//  This is an object Literal
	// prototype holds method (to save memory space) to THIS object that is been created
	Blocstart.prototype = {

		getNode: function getNode() {
			// document.querySelector();
		},

		newChild: function newChild() {}

		// return = {}


		// all of those objects created to point all methods on this prototype chain
	};Blocstart.init.prototype = Blocstart.prototype;

	global.Blocstart = Blocstart;
})(window);
'use strict';

var modal = Blocstart('.js-modal');
"use strict";

// ========================================================
// POLYFILL
// ========================================================

// Polyfill classList for IE 7+
if ("document" in self) {
    if (!("classList" in document.createElement("_")) || document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg", "g"))) {
        (function (t) {
            "use strict";
            if (!("Element" in t)) return;var e = "classList",
                i = "prototype",
                n = t.Element[i],
                s = Object,
                r = String[i].trim || function () {
                return this.replace(/^\s+|\s+$/g, "");
            },
                a = Array[i].indexOf || function (t) {
                var e = 0,
                    i = this.length;for (; e < i; e++) {
                    if (e in this && this[e] === t) {
                        return e;
                    }
                }return -1;
            },
                o = function o(t, e) {
                this.name = t;this.code = DOMException[t];this.message = e;
            },
                l = function l(t, e) {
                if (e === "") {
                    throw new o("SYNTAX_ERR", "An invalid or illegal string was specified");
                }if (/\s/.test(e)) {
                    throw new o("INVALID_CHARACTER_ERR", "String contains an invalid character");
                }return a.call(t, e);
            },
                c = function c(t) {
                var e = r.call(t.getAttribute("class") || ""),
                    i = e ? e.split(/\s+/) : [],
                    n = 0,
                    s = i.length;for (; n < s; n++) {
                    this.push(i[n]);
                }this._updateClassName = function () {
                    t.setAttribute("class", this.toString());
                };
            },
                u = c[i] = [],
                f = function f() {
                return new c(this);
            };o[i] = Error[i];u.item = function (t) {
                return this[t] || null;
            };u.contains = function (t) {
                t += "";return l(this, t) !== -1;
            };u.add = function () {
                var t = arguments,
                    e = 0,
                    i = t.length,
                    n,
                    s = false;do {
                    n = t[e] + "";if (l(this, n) === -1) {
                        this.push(n);s = true;
                    }
                } while (++e < i);if (s) {
                    this._updateClassName();
                }
            };u.remove = function () {
                var t = arguments,
                    e = 0,
                    i = t.length,
                    n,
                    s = false,
                    r;do {
                    n = t[e] + "";r = l(this, n);while (r !== -1) {
                        this.splice(r, 1);s = true;r = l(this, n);
                    }
                } while (++e < i);if (s) {
                    this._updateClassName();
                }
            };u.toggle = function (t, e) {
                t += "";var i = this.contains(t),
                    n = i ? e !== true && "remove" : e !== false && "add";if (n) {
                    this[n](t);
                }if (e === true || e === false) {
                    return e;
                } else {
                    return !i;
                }
            };u.toString = function () {
                return this.join(" ");
            };if (s.defineProperty) {
                var h = { get: f, enumerable: true, configurable: true };try {
                    s.defineProperty(n, e, h);
                } catch (d) {
                    if (d.number === -2146823252) {
                        h.enumerable = false;s.defineProperty(n, e, h);
                    }
                }
            } else if (s[i].__defineGetter__) {
                n.__defineGetter__(e, f);
            }
        })(self);
    } else {
        (function () {
            "use strict";
            var t = document.createElement("_");t.classList.add("c1", "c2");if (!t.classList.contains("c2")) {
                var e = function e(t) {
                    var e = DOMTokenList.prototype[t];DOMTokenList.prototype[t] = function (t) {
                        var i,
                            n = arguments.length;for (i = 0; i < n; i++) {
                            t = arguments[i];e.call(this, t);
                        }
                    };
                };e("add");e("remove");
            }t.classList.toggle("c3", false);if (t.classList.contains("c3")) {
                var i = DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle = function (t, e) {
                    if (1 in arguments && !this.contains(t) === !e) {
                        return e;
                    } else {
                        return i.call(this, t);
                    }
                };
            }t = null;
        })();
    }
}

// Remove class on init if js is enabled
document.documentElement.classList.remove('no-js');

// ========================================================
// SOCIAL-POP
// ========================================================
for (var SOCIALPOPS = document.querySelectorAll(".js-social-pop"), i = 0, l = SOCIALPOPS.length; i < l; i++) {
    SOCIALPOPS[i].addEventListener("click", function (a) {
        a.preventDefault();window.open(a.currentTarget.href, "", "menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=500,width=500");
    }, false);
} // ========================================================
// EXTEND
// ========================================================
var extend = function extend(a) {
    a = a || {};for (var b = 1; b < arguments.length; b++) {
        if (arguments[b]) for (var c in arguments[b]) {
            arguments[b].hasOwnProperty(c) && (a[c] = arguments[b][c]);
        }
    }return a;
};

// ========================================================
// WINDOW RESIZE
// ========================================================
var SCREENSIZE = 0,
    WIDESCREEN = false;

function windowResize() {
    if (window.getComputedStyle != null) {
        SCREENSIZE = window.getComputedStyle(document.body, ':after').getPropertyValue('content');
        SCREENSIZE = parseInt(SCREENSIZE.replace(/["']{1}/gi, ""));
        if (isNaN(SCREENSIZE)) SCREENSIZE = 0;
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
