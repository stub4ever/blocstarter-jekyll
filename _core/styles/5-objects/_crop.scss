// Crop
//
//  * A list of cropping ratios that get generated as modifier classes. <br>
// Provide a cropping container in order to display media (usually images) <br>
// cropped to certain ratios.
//
// A default list of cropping ratios that get generated as modifier classes.
// - 2:1
// - 4:3
// - 16:9
//
// Markup:
// <div class="crop  crop--2:1">
//     <img class="crop__content crop__content--center" src="https://unsplash.it/1000/500" alt="">
// </div>
//
// Styleguide: Objects.6


// A list of cropping ratios that get generated as modifier classes.

$crops: (
    (2:1),
    (4:3),
    (16:9),
    ) !default;



/**
* Provide a cropping container in order to display media (usually images)
* cropped to certain ratios.
*
* 1. Set up a positioning context in which the image can sit.
* 2. This is the crucial part: where the cropping happens.
*/

.crop {
    position: relative; /* [1] */
    display: block;
    overflow: hidden; /* [2] */
}


/**
* Apply this class to the content (usually `img`) that needs cropping.
*
* 1. Image’s default positioning is top-left in the cropping box.
* 2. Make sure the media doesn’t stop itself too soon.
*/

.crop__content {
    position: absolute;
    top:  0; /* [1] */
    left: 0; /* [1] */
    max-width: none; /* [2] */
}


/**
* We can position the media in different locations within the cropping area.
*/

.crop__content--right {
    right: 0;
    left: auto;
}

.crop__content--bottom {
    top: auto;
    bottom: 0;
}

.crop__content--center {
    top:  50%;
    left: 50%;
    transform: translate(-50%, -50%);
}



/* stylelint-disable */

/* Crop-ratio variants.
========================================================================== */

/**
* Generate a series of crop classes to be used like so:
*
*   <div class="crop  crop--16:9">
*
*/

@each $crop in $crops {

    @each $antecedent, $consequent in $crop {

        @if (type-of($antecedent) != number) {
            @error "`#{$antecedent}` needs to be a number."
        }

        @if (type-of($consequent) != number) {
            @error "`#{$consequent}` needs to be a number."
        }

        .crop--#{$antecedent}\:#{$consequent} {
            padding-bottom: ($consequent/$antecedent) * 100%;
        }

    }

}

/* stylelint-enable */
