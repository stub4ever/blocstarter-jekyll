// // ========================================================
// // bloc
// // ========================================================

// /**
//  * Grid-like bloc system.
//  *
//  * The bloc object provides us with a column-style bloc system. This file
//  * contains the basic structural elements, but classes should be complemented
//  * with width utilities, for example:
//  *
//  *   <div class="bloc">
//  *     <div class="bloc__item  w-1/2">
//  *     </div>
//  *     <div class="bloc__item  w-1/2">
//  *     </div>
//  *   </div>
//  *
//  * The above will create a two column structure in which each column will
//  * fluidly fill half of the width of the parent. We can have more complex
//  * systems:
//  *
//  *   <div class="bloc">
//  *     <div class="bloc__item  w-1/1  w-1/3@desktop">
//  *     </div>
//  *     <div class="bloc__item  w-1/2  w-1/3@desktop">
//  *     </div>
//  *     <div class="bloc__item  w-1/2  w-1/3@desktop">
//  *     </div>
//  *   </div>
//  *
//  * The above will create a system in which the first item will be 100% width
//  * until we enter our desktop breakpoint, when it will become 33.333% width. The
//  * second and third items will be 50% of their parent, until they also become
//  * 33.333% width at the desktop breakpoint.
//  *
//  * We can also manipulate entire bloc systems by adding a series of modifiers
//  * to the `.bloc` block. For example:
//  *
//  *   <div class="bloc  bloc--reverse">
//  *
//  * This will reverse the displayed order of the system so that it runs in the
//  * opposite order to our source, effectively flipping the system over.
//  *
//  *   <div class="bloc  bloc--[right|center]">
//  *
//  * This will cause the system to fill up from either the centre or the right
//  * hand side. Default behaviour is to fill up the bloc system from the left.
//  *
//  * There are plenty more options available to us: explore them below.
//  */

// By default we use the `font-size: 0;` trick to remove whitespace between
// items. Set this to true in order to use a markup-based strategy like
// commenting out whitespace or minifying HTML.

$use-markup-fix: false !default;

/* Default/mandatory classes.
========================================================================== */

/**
* 1. Allows us to use the bloc object on any type of element.
* 2. We need to defensively reset any box-model properties.
* 3. Use the negative margin trick for multi-row grids:
*    http://csswizardry.com/2011/08/building-better-grid-systems/
*/

.bloc {
    display: block; /* [1] */
    list-style: none; /* [1] */
    margin: 0; /* [3] */

    @if ($use-markup-fix == false) {
        font-size: 0;
    }
}


//   *
//    * 1. Required in order to combine fluid widths with fixed gutters.
//    * 2. Allows us to manipulate grids vertically, with text-level properties,
//    *    etc.
//    * 3. Default item alignment is with the tops of each other, like most
//    *    traditional grid/bloc systems.
//    * 4. Fallback for old IEs not supporting `rem` values.



.bloc__item {
    box-sizing: border-box; /* [1] */
    display: inline-block; /* [2] */
    vertical-align: top; /* [3] */
    width: 100%;

    @if ($use-markup-fix == false) {
        font-size: $base-size; /* [5] */
        font-size: 1rem;
    }
}


// /* Vertical alignment modifiers.
//    ========================================================================== */

/**
* Align all grid items to the middles of each other.
*/

.bloc--middle {

    > .bloc__item {
        vertical-align: middle;
    }

}


/**
* Align all grid items to the bottoms of each other.
*/

.bloc--bottom {

    > .bloc__item {
        vertical-align: bottom;
    }

}





// /* Fill order modifiers.
//    ========================================================================== */

/**
* Fill up the bloc system from the centre.
*/

.bloc--center {
    text-align: center;

    > .bloc__item {
        text-align: left;
    }
}


/**
* Fill up the bloc system from the right-hand side.
*/

.bloc--right {
    text-align: right;

    > .bloc__item {
        text-align: left;
    }

}


/**
* Fill up the bloc system from the left-hand side. This will likely only be
* needed when using in conjunction with `.bloc--reverse`.
*/

.bloc--left {
    text-align: left;

    > .bloc__item {
        text-align: left;
    }

}


/**
* Reverse the rendered order of the grid system.
*/

.bloc--reverse {
    direction: rtl;

    > .bloc__item {
        direction: ltr;
    }

}


/* Autwidths modifier.
========================================================================== */

/**
* Cause bloc items to take up a non-explicit amount of width.
*/

.bloc--auto {

    > .bloc__item {
        width: auto;
    }

}

